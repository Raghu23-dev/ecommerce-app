<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Sign Up</title>
<style>
    /* Styling for the body, including background gradient and centering */
    body {
      background: linear-gradient(135deg, #4e54c8, #8f94fb);
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
 
    /* Container for the form */
    .form-container {
      background-color: white;
      width: 100%;
      max-width: 280px;
      padding: 12px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      text-align: center;
    }
 
    /* Styling for the form heading */
    h2 {
      margin-bottom: 12px;
      color: #333;
      font-size: 1em;
      font-weight: 700;
    }
 
    /* Styling for form groups */
    .form-group {
      margin-bottom: 8px;
    }
 
    /* Styling for labels in form groups */
    .form-group label {
      display: block;
      font-size: 0.8em;
      margin-bottom: 6px;
      color: #555;
      font-weight: 500;
      text-align: left;
    }
 
    /* Styling for inputs in form groups */
    .form-group input {
      width: calc(100% - 10px);
      padding: 6px;
      font-size: 0.8em;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #f9f9f9;
      color: #333;
      margin-bottom: 4px;
      box-shadow: none;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
 
    /* Focus styling for inputs */
    .form-group input:focus {
      border-color: transparent;
      outline: none;
      box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.2);
    }
 
    /* Hover styling for inputs */
    .form-group input:hover {
      box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.5);
    }
 
    /* Styling for error messages */
    .error {
      color: red;
      font-size: 0.7em;
      margin-top: 2px;
    }
 
    /* Styling for password requirements section */
    .password-requirements {
      margin-top: 6px;
      font-size: 0.7em;
      color: #555;
      max-height: 0;
      overflow: hidden;
      transition: max-height 2s ease-out;
    }
 
    /* Styling for the list in the password requirements section */
    .password-requirements ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
 
    /* Styling for list items in the password requirements section */
    .password-requirements li {
      display: flex;
      align-items: center;
      margin-bottom: 2px;
    }
 
    /* Styling for indicators in password requirements */
    .password-requirements li .indicator {
      margin-right: 6px;
      font-size: 1em;
      color: red;
      transition: color 0.3s ease;
    }
 
    /* Styling for valid indicators */
    .password-requirements li.valid .indicator {
      color: green;
    }
 
    /* Show the password requirements when active */
    .password-requirements.active {
      max-height: 150px;
    }
 
    /* Styling for the submit button */
    .submit-btn {
      width: 100%;
      padding: 8px;
      background-color: #3a7bd5;
      color: white;
      font-weight: bold;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8em;
      margin-top: 10px;
      box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.5);
      transition: box-shadow 0.3s, background-color 0.3s;
    }
 
    /* Hover styling for the submit button */
    .submit-btn:hover {
      background-color: #2a5cb1;
      box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.5);
    }
 
    /* Styling for links */
    .link {
      color: #3a7bd5;
      text-decoration: none;
      font-weight: 500;
      font-size: 0.8em;
    }
 
    /* Hover styling for links */
    .link:hover {
      text-decoration: underline;
    }
 
    /* Center text styling */
    .center-text {
      text-align: center;
      font-size: 0.8em;
    }
 
    /* Styling for text in the center-text class */
    .center-text a {
      font-size: 1em;
    }
</style>
</head>
<body>
 
  <!-- Form container -->
<div class="form-container">
<h2>Sign Up</h2>
<!-- Sign Up Form -->
<form id="signupForm" action="/signup" method="post">
<!-- Name input field -->
<div class="form-group">
<label for="name">Name:</label>
<input type="text" id="name" name="name" placeholder="Name" required>
</div>
<!-- Username input field -->
<div class="form-group">
<label for="username">Username:</label>
<input type="text" id="username" name="username" placeholder="Username" required>
<span class="error" id="usernameError"></span>
</div>
<!-- Email input field -->
<div class="form-group">
<label for="email">Email:</label>
<input type="email" id="email" name="email" placeholder="Email" required>
<span class="error" id="emailError"></span>
</div>
<!-- Password input field -->
<div class="form-group">
<label for="password">Password:</label>
<input type="password" id="password" name="password" placeholder="Password" required>
<span class="error" id="passwordError"></span>
<!-- Password requirements -->
<div class="password-requirements" id="passwordRequirements">
<ul>
<li id="lengthRequirement" class="invalid"><span class="indicator">✖</span>Must be at least 8 characters!</li>
<li id="uppercaseRequirement" class="invalid"><span class="indicator">✖</span>Must include at least one UpperCase Letter (A-Z)</li>
<li id="lowercaseRequirement" class="invalid"><span class="indicator">✖</span>Must include at least one LowerCase Letter (a-z)</li>
<li id="numberRequirement" class="invalid"><span class="indicator">✖</span>Must include at least one Number (0-9)</li>
<li id="symbolRequirement" class="invalid"><span class="indicator">✖</span>Must include at least one special character (!,@,#,$)</li>
</ul>
</div>
</div>
<!-- Confirm Password input field -->
<div class="form-group">
<label for="confirmPassword">Confirm Password:</label>
<input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" required>
<span class="error" id="confirmPasswordError"></span>
</div>
<!-- Submit button -->
<button type="submit" class="submit-btn">Sign Up</button>
</form>
<!-- Link to login page -->
<p class="center-text">Already have an account? <a class="link" href="/login">Login</a></p>
</div>
 
  <script>
    // Password validation logic
    document.getElementById('password').addEventListener('input', function() {
      const password = document.getElementById('password').value;
      const requirements = document.getElementById('passwordRequirements');
      // Elements for each requirement
      const lengthRequirement = document.getElementById('lengthRequirement');
      const uppercaseRequirement = document.getElementById('uppercaseRequirement');
      const lowercaseRequirement = document.getElementById('lowercaseRequirement');
      const numberRequirement = document.getElementById('numberRequirement');
      const symbolRequirement = document.getElementById('symbolRequirement');
      // Validations
      let hasUpper = /[A-Z]/.test(password);
      let hasLower = /[a-z]/.test(password);
      let hasNumber = /\d/.test(password);
      let hasSymbol = /[!@#$%^&*(),.?":{}|<>]/.test(password);
      let isLengthValid = password.length >= 8;
 
      // Update UI based on validation results
      lengthRequirement.classList.toggle('valid', isLengthValid);
      lengthRequirement.querySelector('.indicator').textContent = isLengthValid ? '✔' : '✖';
 
      uppercaseRequirement.classList.toggle('valid', hasUpper);
      uppercaseRequirement.querySelector('.indicator').textContent = hasUpper ? '✔' : '✖';
 
      lowercaseRequirement.classList.toggle('valid', hasLower);
      lowercaseRequirement.querySelector('.indicator').textContent = hasLower ? '✔' : '✖';
 
      numberRequirement.classList.toggle('valid', hasNumber);
      numberRequirement.querySelector('.indicator').textContent = hasNumber ? '✔' : '✖';
 
      symbolRequirement.classList.toggle('valid', hasSymbol);
      symbolRequirement.querySelector('.indicator').textContent = hasSymbol ? '✔' : '✖';
 
      // Show requirements when any condition is met, hide otherwise
      if (isLengthValid || hasUpper || hasLower || hasNumber || hasSymbol) {
        requirements.classList.add('active');
      } else {
        requirements.classList.remove('active');
      }
    });
 
    // Confirm password validation logic
    document.getElementById('confirmPassword').addEventListener('input', function() {
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const confirmPasswordError = document.getElementById('confirmPasswordError');
 
      if (confirmPassword !== password) {
        confirmPasswordError.textContent = 'Passwords do not match.';
      } else {
        confirmPasswordError.textContent = '';
      }
    });
</script>
 
</body>
</html>